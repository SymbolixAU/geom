% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/geos-binary-operators.R
\name{geos_intersection}
\alias{geos_intersection}
\alias{geos_difference}
\alias{geos_sym_difference}
\alias{geos_union}
\alias{geos_unary_union}
\alias{geos_coverage_union}
\alias{geos_clip_by_rect}
\title{Main geometry operators}
\usage{
geos_intersection(x, y, to = geo_ptype(x))

geos_difference(x, y, to = geo_ptype(x))

geos_sym_difference(x, y, to = geo_ptype(x))

geos_union(x, y, to = geo_ptype(x))

geos_unary_union(x, to = geo_ptype(x))

geos_coverage_union(x, to = geo_ptype(x))

geos_clip_by_rect(x, rect, to = geo_ptype(x))
}
\arguments{
\item{x}{A geometry-like object}

\item{y}{A geometry-like object. \code{x} and \code{y} of length 1
is recycled to the length of the other (like \code{\link[tibble:tibble]{tibble::tibble()}}).}

\item{to}{A prototype created by \code{\link[=geo_ptype]{geo_ptype()}}}

\item{rect}{A \code{\link[=geo_rect]{geo_rect()}} used for the non-robust clipping
algorithm.}
}
\value{
A geometry-like object, in the format defined by \code{to}.
the geometry type is typically that of \code{x}, but may be
promoted to a multi-type. These functions may return
an empty geometry collection (e.g., for two geometries
that do not intersect).
}
\description{
\itemize{
\item \code{\link[=geos_intersection]{geos_intersection()}} returns the set of points common to both \code{x}
and \code{y}.
\item \code{\link[=geos_difference]{geos_difference()}} returns the set of points from \code{x} that are
not contained by \code{y}.
\item \code{\link[=geos_sym_difference]{geos_sym_difference()}} returns the set of points that are \emph{not}
common to \code{x} and \code{y}.
\item \code{\link[=geos_union]{geos_union()}} returns the set of points contained by either \code{x}
or \code{y}.
\item \code{\link[=geos_unary_union]{geos_unary_union()}} works like \code{\link[=geos_union]{geos_union()}}, but only operates
on one geometry (\code{x}). This is useful when \code{x} is a multi- or collection type
that contains overlapping geometries.
\item \code{\link[=geos_coverage_union]{geos_coverage_union()}} is a fast union only for polygons that
do not overlap.
\item \code{\link[=geos_clip_by_rect]{geos_clip_by_rect()}} is a fast intersection between a geometry
and bounds defined by a \code{\link[=geo_rect]{geo_rect()}}.
}
}
\examples{
poly1 <- geo_wkt("POLYGON ((0 0, 0 10, 10 10, 10 0, 0 0))")
poly2 <- geo_wkt("POLYGON ((5 5, 5 15, 15 15, 15 5, 5 5))")

# intersection
geo_plot(c(poly1, poly2))
geo_plot_add(geos_intersection(poly1, poly2), col = "grey90")

# difference
geo_plot(c(poly1, poly2))
geo_plot_add(geos_difference(poly1, poly2), col = "grey90")

# symmetric difference
geo_plot(c(poly1, poly2))
geo_plot_add(geos_sym_difference(poly1, poly2), col = "grey90")

# union
geo_plot(c(poly1, poly2))
geo_plot_add(geos_union(poly1, poly2), col = "grey90")

# unary union is useful if you have multi- or collection
# geometries that may overlap
collection <- geo_wkt("
  GEOMETRYCOLLECTION (
    POLYGON ((0 0, 0 10, 10 10, 10 0, 0 0)),
    POLYGON ((5 5, 5 15, 15 15, 15 5, 5 5))
  )
")

geo_plot(c(poly1, poly2))
geo_plot_add(geos_unary_union(collection), col = "grey90")

# coverage union is only for polygons, and does not dissolve
# boundaries (only on GEOS >= 3.8.0)
if (geos_version() >= "3.8.0") {
  geo_plot(c(poly1, poly2))
  geo_plot_add(geos_coverage_union(collection), col = "grey90")
}

# clip by rect performs a fast intersection with a rectangle
# similar to an intersection
geo_plot(poly1)
geo_plot_add(
  geos_clip_by_rect(poly1, geo_rect(-1, -1, 8, 8)),
  col = "grey90"
)

}

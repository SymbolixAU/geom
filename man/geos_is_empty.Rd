% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/geos-geometry-info.R
\name{geos_is_empty}
\alias{geos_is_empty}
\alias{geos_is_simple}
\alias{geos_has_z}
\alias{geos_is_closed}
\alias{geos_geom_type_id}
\alias{geos_geom_type}
\alias{geos_get_srid}
\alias{geos_n_geometries}
\alias{geos_n_coordinates}
\alias{geos_n_points}
\alias{geos_n_interior_rings}
\alias{geos_n_dimensions}
\alias{geos_n_coordinate_dimensions}
\title{Geometry information}
\usage{
geos_is_empty(x)

geos_is_simple(x)

geos_has_z(x)

geos_is_closed(x)

geos_geom_type_id(x)

geos_geom_type(x)

geos_get_srid(x)

geos_n_geometries(x)

geos_n_coordinates(x)

geos_n_points(x)

geos_n_interior_rings(x)

geos_n_dimensions(x)

geos_n_coordinate_dimensions(x)
}
\arguments{
\item{x}{A geometry-like object}
}
\description{
\itemize{
\item \code{\link[=geos_is_empty]{geos_is_empty()}} returns \code{TRUE} if \code{x} contains no coordinates.
\item \code{\link[=geos_is_simple]{geos_is_simple()}} returns \code{TRUE} if \code{x} does not intersect itself.
\item \code{\link[=geos_has_z]{geos_has_z()}} returns \code{TRUE} if \code{x} contains z coordinates.
\item \code{\link[=geos_is_closed]{geos_is_closed()}} returns \code{TRUE} if the first coordinate of \code{x} is also the
last coordinate of \code{x}.
\item \code{\link[=geos_geom_type_id]{geos_geom_type_id()}} returns a number identifying the geometry type
(0-7, "point", "linestring", "linearring", "polygon",
"multipoint", "multilinestring", "multipolygon",
"geometrycollection"). This is more useful in the C++ API so that
you can \code{switch()} on  the geometry type.
\item \code{\link[=geos_geom_type]{geos_geom_type()}} returns the geometry type as a character vector.
\item \code{\link[=geos_get_srid]{geos_get_srid()}} returns the spatial reference ID included in the
geometry (can be embedded in EWKB). Often there is no embedded SRID,
in which case 0 is returned.
\item \code{\link[=geos_n_geometries]{geos_n_geometries()}} returns the number of geometries for multi
or collection types, or 1 otherwise.
\item \code{\link[=geos_n_points]{geos_n_points()}} returns the number of points in a linestring geometry
\item \code{\link[=geos_n_interior_rings]{geos_n_interior_rings()}} counts the interior rings in a polygon geometry
\item \code{\link[=geos_n_dimensions]{geos_n_dimensions()}} refers to the dimensionality of the geometry,
in the sense that points are 0d, lines are 1d, and polygons are 2d.
Collection types are processed recursively, returning the maximum
dimensionality of their contents.
}
}
\examples{
geos_is_empty(geo_wkt("POINT EMPTY"))
geos_is_empty(geo_wkt("POINT (30 10)"))

# first geometry intersects itself
geos_is_simple(geo_wkt("LINESTRING (0 0, 0 10, 10 0, 0 0, 10 10)"))
geos_is_simple(geo_wkt("LINESTRING (0 0, 0 10, 10 0, 0 0)"))

# first geometry is 3D
geos_has_z(geo_wkt("POINT (10 10 1)"))
geos_has_z(geo_wkt("POINT (10 10)"))

# first geometry is closed
geos_is_closed(geo_wkt("LINESTRING (0 0, 0 10, 10 0, 0 0)"))
geos_is_closed(geo_wkt("LINESTRING (0 0, 0 10, 10 0)"))

# counts geometries in mulit- and collection geometries
geos_n_geometries(geo_wkt("POINT EMPTY"))
geos_n_geometries(geo_wkt("POINT (0 0)"))
geos_n_geometries(geo_wkt("MULTIPOINT (0 0, 10 10)"))
geos_n_geometries(geo_wkt("GEOMETRYCOLLECTION(POINT (10 10))"))

# counts coordinates and dimensions (useful for allocating memory)
geos_n_coordinates(geo_wkt("POINT EMPTY"))
geos_n_coordinates(geo_wkt("POINT (0 0)"))
geos_n_coordinates(geo_wkt("MULTIPOINT (0 0, 10 10)"))

geos_n_coordinate_dimensions(geo_wkt("POINT (10 10)"))
geos_n_coordinate_dimensions(geo_wkt("POINT (10 10 0)"))

# count nodes in a linestring
geos_n_points(geo_wkt("LINESTRING EMPTY"))
geos_n_points(geo_wkt("LINESTRING (0 0, 10 10)"))
geos_n_points(geo_wkt("LINESTRING (0 0, 5 5, 10 10)"))

# get the number of interior rings
poly_hole <- geo_wkt("POLYGON ((35 10, 45 45, 15 40, 10 20, 35 10), (20 30, 35 35, 30 20, 20 30))")
poly <- geo_wkt("POLYGON ((35 10, 45 45, 15 40, 10 20, 35 10))")
geos_n_interior_rings(geo_wkt("POLYGON EMPTY"))
geos_n_interior_rings(poly)
geos_n_interior_rings(poly_hole)

# get the dimensionality of the geometry
# in the sense that points  are 0d, lines are 1d,
# and polygons are 2d
geos_n_dimensions(geo_wkt("POINT (10 10)"))
geos_n_dimensions(geo_wkt("LINESTRING (10 10, 0 0)"))
geos_n_dimensions(geo_wkt("POLYGON ((10 10, 0 0, 0 10, 10 10))"))
geos_n_dimensions(geo_wkt("GEOMETRYCOLLECTION(POINT (10 10))"))
geos_n_dimensions(geo_wkt("GEOMETRYCOLLECTION(LINESTRING (10 10, 0 0))"))

}

// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_geom_RCPPEXPORTS_H_GEN_
#define RCPP_geom_RCPPEXPORTS_H_GEN_

#include <Rcpp.h>

namespace geom {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("geom", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("geom", "_geom_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in geom");
            }
        }
    }

    inline SEXP cpp_convert(SEXP data, SEXP ptype) {
        typedef SEXP(*Ptr_cpp_convert)(SEXP,SEXP);
        static Ptr_cpp_convert p_cpp_convert = NULL;
        if (p_cpp_convert == NULL) {
            validateSignature("SEXP(*cpp_convert)(SEXP,SEXP)");
            p_cpp_convert = (Ptr_cpp_convert)R_GetCCallable("geom", "_geom_cpp_convert");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_convert(Shield<SEXP>(Rcpp::wrap(data)), Shield<SEXP>(Rcpp::wrap(ptype)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

    inline std::string cpp_version_impl() {
        typedef SEXP(*Ptr_cpp_version_impl)();
        static Ptr_cpp_version_impl p_cpp_version_impl = NULL;
        if (p_cpp_version_impl == NULL) {
            validateSignature("std::string(*cpp_version_impl)()");
            p_cpp_version_impl = (Ptr_cpp_version_impl)R_GetCCallable("geom", "_geom_cpp_version_impl");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_version_impl();
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<std::string >(rcpp_result_gen);
    }

    inline void cpp_test_throw_error() {
        typedef SEXP(*Ptr_cpp_test_throw_error)();
        static Ptr_cpp_test_throw_error p_cpp_test_throw_error = NULL;
        if (p_cpp_test_throw_error == NULL) {
            validateSignature("void(*cpp_test_throw_error)()");
            p_cpp_test_throw_error = (Ptr_cpp_test_throw_error)R_GetCCallable("geom", "_geom_cpp_test_throw_error");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_test_throw_error();
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
    }

    inline SEXP cpp_intersection(SEXP dataLeft, SEXP dataRight, SEXP ptype) {
        typedef SEXP(*Ptr_cpp_intersection)(SEXP,SEXP,SEXP);
        static Ptr_cpp_intersection p_cpp_intersection = NULL;
        if (p_cpp_intersection == NULL) {
            validateSignature("SEXP(*cpp_intersection)(SEXP,SEXP,SEXP)");
            p_cpp_intersection = (Ptr_cpp_intersection)R_GetCCallable("geom", "_geom_cpp_intersection");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_intersection(Shield<SEXP>(Rcpp::wrap(dataLeft)), Shield<SEXP>(Rcpp::wrap(dataRight)), Shield<SEXP>(Rcpp::wrap(ptype)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

    inline SEXP cpp_difference(SEXP dataLeft, SEXP dataRight, SEXP ptype) {
        typedef SEXP(*Ptr_cpp_difference)(SEXP,SEXP,SEXP);
        static Ptr_cpp_difference p_cpp_difference = NULL;
        if (p_cpp_difference == NULL) {
            validateSignature("SEXP(*cpp_difference)(SEXP,SEXP,SEXP)");
            p_cpp_difference = (Ptr_cpp_difference)R_GetCCallable("geom", "_geom_cpp_difference");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_difference(Shield<SEXP>(Rcpp::wrap(dataLeft)), Shield<SEXP>(Rcpp::wrap(dataRight)), Shield<SEXP>(Rcpp::wrap(ptype)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

    inline SEXP cpp_sym_difference(SEXP dataLeft, SEXP dataRight, SEXP ptype) {
        typedef SEXP(*Ptr_cpp_sym_difference)(SEXP,SEXP,SEXP);
        static Ptr_cpp_sym_difference p_cpp_sym_difference = NULL;
        if (p_cpp_sym_difference == NULL) {
            validateSignature("SEXP(*cpp_sym_difference)(SEXP,SEXP,SEXP)");
            p_cpp_sym_difference = (Ptr_cpp_sym_difference)R_GetCCallable("geom", "_geom_cpp_sym_difference");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_sym_difference(Shield<SEXP>(Rcpp::wrap(dataLeft)), Shield<SEXP>(Rcpp::wrap(dataRight)), Shield<SEXP>(Rcpp::wrap(ptype)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

    inline SEXP cpp_union(SEXP dataLeft, SEXP dataRight, SEXP ptype) {
        typedef SEXP(*Ptr_cpp_union)(SEXP,SEXP,SEXP);
        static Ptr_cpp_union p_cpp_union = NULL;
        if (p_cpp_union == NULL) {
            validateSignature("SEXP(*cpp_union)(SEXP,SEXP,SEXP)");
            p_cpp_union = (Ptr_cpp_union)R_GetCCallable("geom", "_geom_cpp_union");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_union(Shield<SEXP>(Rcpp::wrap(dataLeft)), Shield<SEXP>(Rcpp::wrap(dataRight)), Shield<SEXP>(Rcpp::wrap(ptype)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

    inline SEXP cpp_unary_union(SEXP dataLeft, SEXP ptype) {
        typedef SEXP(*Ptr_cpp_unary_union)(SEXP,SEXP);
        static Ptr_cpp_unary_union p_cpp_unary_union = NULL;
        if (p_cpp_unary_union == NULL) {
            validateSignature("SEXP(*cpp_unary_union)(SEXP,SEXP)");
            p_cpp_unary_union = (Ptr_cpp_unary_union)R_GetCCallable("geom", "_geom_cpp_unary_union");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_unary_union(Shield<SEXP>(Rcpp::wrap(dataLeft)), Shield<SEXP>(Rcpp::wrap(ptype)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

    inline SEXP cpp_coverage_union(SEXP dataLeft, SEXP ptype) {
        typedef SEXP(*Ptr_cpp_coverage_union)(SEXP,SEXP);
        static Ptr_cpp_coverage_union p_cpp_coverage_union = NULL;
        if (p_cpp_coverage_union == NULL) {
            validateSignature("SEXP(*cpp_coverage_union)(SEXP,SEXP)");
            p_cpp_coverage_union = (Ptr_cpp_coverage_union)R_GetCCallable("geom", "_geom_cpp_coverage_union");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_coverage_union(Shield<SEXP>(Rcpp::wrap(dataLeft)), Shield<SEXP>(Rcpp::wrap(ptype)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

    inline SEXP cpp_clip_by_rect(SEXP dataLeft, NumericVector xmin, NumericVector ymin, NumericVector xmax, NumericVector ymax, SEXP to) {
        typedef SEXP(*Ptr_cpp_clip_by_rect)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_cpp_clip_by_rect p_cpp_clip_by_rect = NULL;
        if (p_cpp_clip_by_rect == NULL) {
            validateSignature("SEXP(*cpp_clip_by_rect)(SEXP,NumericVector,NumericVector,NumericVector,NumericVector,SEXP)");
            p_cpp_clip_by_rect = (Ptr_cpp_clip_by_rect)R_GetCCallable("geom", "_geom_cpp_clip_by_rect");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_clip_by_rect(Shield<SEXP>(Rcpp::wrap(dataLeft)), Shield<SEXP>(Rcpp::wrap(xmin)), Shield<SEXP>(Rcpp::wrap(ymin)), Shield<SEXP>(Rcpp::wrap(xmax)), Shield<SEXP>(Rcpp::wrap(ymax)), Shield<SEXP>(Rcpp::wrap(to)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

    inline LogicalVector cpp_is_disjoint(SEXP dataLeft, SEXP dataRight) {
        typedef SEXP(*Ptr_cpp_is_disjoint)(SEXP,SEXP);
        static Ptr_cpp_is_disjoint p_cpp_is_disjoint = NULL;
        if (p_cpp_is_disjoint == NULL) {
            validateSignature("LogicalVector(*cpp_is_disjoint)(SEXP,SEXP)");
            p_cpp_is_disjoint = (Ptr_cpp_is_disjoint)R_GetCCallable("geom", "_geom_cpp_is_disjoint");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_is_disjoint(Shield<SEXP>(Rcpp::wrap(dataLeft)), Shield<SEXP>(Rcpp::wrap(dataRight)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<LogicalVector >(rcpp_result_gen);
    }

    inline LogicalVector cpp_touches(SEXP dataLeft, SEXP dataRight) {
        typedef SEXP(*Ptr_cpp_touches)(SEXP,SEXP);
        static Ptr_cpp_touches p_cpp_touches = NULL;
        if (p_cpp_touches == NULL) {
            validateSignature("LogicalVector(*cpp_touches)(SEXP,SEXP)");
            p_cpp_touches = (Ptr_cpp_touches)R_GetCCallable("geom", "_geom_cpp_touches");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_touches(Shield<SEXP>(Rcpp::wrap(dataLeft)), Shield<SEXP>(Rcpp::wrap(dataRight)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<LogicalVector >(rcpp_result_gen);
    }

    inline LogicalVector cpp_intersects(SEXP dataLeft, SEXP dataRight) {
        typedef SEXP(*Ptr_cpp_intersects)(SEXP,SEXP);
        static Ptr_cpp_intersects p_cpp_intersects = NULL;
        if (p_cpp_intersects == NULL) {
            validateSignature("LogicalVector(*cpp_intersects)(SEXP,SEXP)");
            p_cpp_intersects = (Ptr_cpp_intersects)R_GetCCallable("geom", "_geom_cpp_intersects");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_intersects(Shield<SEXP>(Rcpp::wrap(dataLeft)), Shield<SEXP>(Rcpp::wrap(dataRight)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<LogicalVector >(rcpp_result_gen);
    }

    inline LogicalVector cpp_crosses(SEXP dataLeft, SEXP dataRight) {
        typedef SEXP(*Ptr_cpp_crosses)(SEXP,SEXP);
        static Ptr_cpp_crosses p_cpp_crosses = NULL;
        if (p_cpp_crosses == NULL) {
            validateSignature("LogicalVector(*cpp_crosses)(SEXP,SEXP)");
            p_cpp_crosses = (Ptr_cpp_crosses)R_GetCCallable("geom", "_geom_cpp_crosses");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_crosses(Shield<SEXP>(Rcpp::wrap(dataLeft)), Shield<SEXP>(Rcpp::wrap(dataRight)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<LogicalVector >(rcpp_result_gen);
    }

    inline LogicalVector cpp_is_within(SEXP dataLeft, SEXP dataRight) {
        typedef SEXP(*Ptr_cpp_is_within)(SEXP,SEXP);
        static Ptr_cpp_is_within p_cpp_is_within = NULL;
        if (p_cpp_is_within == NULL) {
            validateSignature("LogicalVector(*cpp_is_within)(SEXP,SEXP)");
            p_cpp_is_within = (Ptr_cpp_is_within)R_GetCCallable("geom", "_geom_cpp_is_within");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_is_within(Shield<SEXP>(Rcpp::wrap(dataLeft)), Shield<SEXP>(Rcpp::wrap(dataRight)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<LogicalVector >(rcpp_result_gen);
    }

    inline LogicalVector cpp_contains(SEXP dataLeft, SEXP dataRight) {
        typedef SEXP(*Ptr_cpp_contains)(SEXP,SEXP);
        static Ptr_cpp_contains p_cpp_contains = NULL;
        if (p_cpp_contains == NULL) {
            validateSignature("LogicalVector(*cpp_contains)(SEXP,SEXP)");
            p_cpp_contains = (Ptr_cpp_contains)R_GetCCallable("geom", "_geom_cpp_contains");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_contains(Shield<SEXP>(Rcpp::wrap(dataLeft)), Shield<SEXP>(Rcpp::wrap(dataRight)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<LogicalVector >(rcpp_result_gen);
    }

    inline LogicalVector cpp_overlaps(SEXP dataLeft, SEXP dataRight) {
        typedef SEXP(*Ptr_cpp_overlaps)(SEXP,SEXP);
        static Ptr_cpp_overlaps p_cpp_overlaps = NULL;
        if (p_cpp_overlaps == NULL) {
            validateSignature("LogicalVector(*cpp_overlaps)(SEXP,SEXP)");
            p_cpp_overlaps = (Ptr_cpp_overlaps)R_GetCCallable("geom", "_geom_cpp_overlaps");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_overlaps(Shield<SEXP>(Rcpp::wrap(dataLeft)), Shield<SEXP>(Rcpp::wrap(dataRight)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<LogicalVector >(rcpp_result_gen);
    }

    inline LogicalVector cpp_equals(SEXP dataLeft, SEXP dataRight) {
        typedef SEXP(*Ptr_cpp_equals)(SEXP,SEXP);
        static Ptr_cpp_equals p_cpp_equals = NULL;
        if (p_cpp_equals == NULL) {
            validateSignature("LogicalVector(*cpp_equals)(SEXP,SEXP)");
            p_cpp_equals = (Ptr_cpp_equals)R_GetCCallable("geom", "_geom_cpp_equals");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_equals(Shield<SEXP>(Rcpp::wrap(dataLeft)), Shield<SEXP>(Rcpp::wrap(dataRight)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<LogicalVector >(rcpp_result_gen);
    }

    inline LogicalVector cpp_covers(SEXP dataLeft, SEXP dataRight) {
        typedef SEXP(*Ptr_cpp_covers)(SEXP,SEXP);
        static Ptr_cpp_covers p_cpp_covers = NULL;
        if (p_cpp_covers == NULL) {
            validateSignature("LogicalVector(*cpp_covers)(SEXP,SEXP)");
            p_cpp_covers = (Ptr_cpp_covers)R_GetCCallable("geom", "_geom_cpp_covers");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_covers(Shield<SEXP>(Rcpp::wrap(dataLeft)), Shield<SEXP>(Rcpp::wrap(dataRight)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<LogicalVector >(rcpp_result_gen);
    }

    inline LogicalVector cpp_is_covered_by(SEXP dataLeft, SEXP dataRight) {
        typedef SEXP(*Ptr_cpp_is_covered_by)(SEXP,SEXP);
        static Ptr_cpp_is_covered_by p_cpp_is_covered_by = NULL;
        if (p_cpp_is_covered_by == NULL) {
            validateSignature("LogicalVector(*cpp_is_covered_by)(SEXP,SEXP)");
            p_cpp_is_covered_by = (Ptr_cpp_is_covered_by)R_GetCCallable("geom", "_geom_cpp_is_covered_by");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_is_covered_by(Shield<SEXP>(Rcpp::wrap(dataLeft)), Shield<SEXP>(Rcpp::wrap(dataRight)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<LogicalVector >(rcpp_result_gen);
    }

    inline SEXP cpp_offset_curve(SEXP x, NumericVector width, int quadSegs, int endCapStyle, int joinStyle, double mitreLimit, SEXP to) {
        typedef SEXP(*Ptr_cpp_offset_curve)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_cpp_offset_curve p_cpp_offset_curve = NULL;
        if (p_cpp_offset_curve == NULL) {
            validateSignature("SEXP(*cpp_offset_curve)(SEXP,NumericVector,int,int,int,double,SEXP)");
            p_cpp_offset_curve = (Ptr_cpp_offset_curve)R_GetCCallable("geom", "_geom_cpp_offset_curve");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_offset_curve(Shield<SEXP>(Rcpp::wrap(x)), Shield<SEXP>(Rcpp::wrap(width)), Shield<SEXP>(Rcpp::wrap(quadSegs)), Shield<SEXP>(Rcpp::wrap(endCapStyle)), Shield<SEXP>(Rcpp::wrap(joinStyle)), Shield<SEXP>(Rcpp::wrap(mitreLimit)), Shield<SEXP>(Rcpp::wrap(to)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

    inline SEXP cpp_buffer(SEXP x, NumericVector width, int quadSegs, int endCapStyle, int joinStyle, double mitreLimit, int singleSided, SEXP to) {
        typedef SEXP(*Ptr_cpp_buffer)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_cpp_buffer p_cpp_buffer = NULL;
        if (p_cpp_buffer == NULL) {
            validateSignature("SEXP(*cpp_buffer)(SEXP,NumericVector,int,int,int,double,int,SEXP)");
            p_cpp_buffer = (Ptr_cpp_buffer)R_GetCCallable("geom", "_geom_cpp_buffer");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_buffer(Shield<SEXP>(Rcpp::wrap(x)), Shield<SEXP>(Rcpp::wrap(width)), Shield<SEXP>(Rcpp::wrap(quadSegs)), Shield<SEXP>(Rcpp::wrap(endCapStyle)), Shield<SEXP>(Rcpp::wrap(joinStyle)), Shield<SEXP>(Rcpp::wrap(mitreLimit)), Shield<SEXP>(Rcpp::wrap(singleSided)), Shield<SEXP>(Rcpp::wrap(to)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

    inline LogicalVector cpp_is_empty(SEXP data) {
        typedef SEXP(*Ptr_cpp_is_empty)(SEXP);
        static Ptr_cpp_is_empty p_cpp_is_empty = NULL;
        if (p_cpp_is_empty == NULL) {
            validateSignature("LogicalVector(*cpp_is_empty)(SEXP)");
            p_cpp_is_empty = (Ptr_cpp_is_empty)R_GetCCallable("geom", "_geom_cpp_is_empty");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_is_empty(Shield<SEXP>(Rcpp::wrap(data)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<LogicalVector >(rcpp_result_gen);
    }

    inline LogicalVector cpp_is_simple(SEXP data) {
        typedef SEXP(*Ptr_cpp_is_simple)(SEXP);
        static Ptr_cpp_is_simple p_cpp_is_simple = NULL;
        if (p_cpp_is_simple == NULL) {
            validateSignature("LogicalVector(*cpp_is_simple)(SEXP)");
            p_cpp_is_simple = (Ptr_cpp_is_simple)R_GetCCallable("geom", "_geom_cpp_is_simple");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_is_simple(Shield<SEXP>(Rcpp::wrap(data)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<LogicalVector >(rcpp_result_gen);
    }

    inline LogicalVector cpp_has_z(SEXP data) {
        typedef SEXP(*Ptr_cpp_has_z)(SEXP);
        static Ptr_cpp_has_z p_cpp_has_z = NULL;
        if (p_cpp_has_z == NULL) {
            validateSignature("LogicalVector(*cpp_has_z)(SEXP)");
            p_cpp_has_z = (Ptr_cpp_has_z)R_GetCCallable("geom", "_geom_cpp_has_z");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_has_z(Shield<SEXP>(Rcpp::wrap(data)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<LogicalVector >(rcpp_result_gen);
    }

    inline LogicalVector cpp_is_closed(SEXP data) {
        typedef SEXP(*Ptr_cpp_is_closed)(SEXP);
        static Ptr_cpp_is_closed p_cpp_is_closed = NULL;
        if (p_cpp_is_closed == NULL) {
            validateSignature("LogicalVector(*cpp_is_closed)(SEXP)");
            p_cpp_is_closed = (Ptr_cpp_is_closed)R_GetCCallable("geom", "_geom_cpp_is_closed");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_is_closed(Shield<SEXP>(Rcpp::wrap(data)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<LogicalVector >(rcpp_result_gen);
    }

    inline IntegerVector cpp_geom_type_id(SEXP x) {
        typedef SEXP(*Ptr_cpp_geom_type_id)(SEXP);
        static Ptr_cpp_geom_type_id p_cpp_geom_type_id = NULL;
        if (p_cpp_geom_type_id == NULL) {
            validateSignature("IntegerVector(*cpp_geom_type_id)(SEXP)");
            p_cpp_geom_type_id = (Ptr_cpp_geom_type_id)R_GetCCallable("geom", "_geom_cpp_geom_type_id");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_geom_type_id(Shield<SEXP>(Rcpp::wrap(x)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<IntegerVector >(rcpp_result_gen);
    }

    inline IntegerVector cpp_get_srid(SEXP x) {
        typedef SEXP(*Ptr_cpp_get_srid)(SEXP);
        static Ptr_cpp_get_srid p_cpp_get_srid = NULL;
        if (p_cpp_get_srid == NULL) {
            validateSignature("IntegerVector(*cpp_get_srid)(SEXP)");
            p_cpp_get_srid = (Ptr_cpp_get_srid)R_GetCCallable("geom", "_geom_cpp_get_srid");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_get_srid(Shield<SEXP>(Rcpp::wrap(x)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<IntegerVector >(rcpp_result_gen);
    }

    inline IntegerVector cpp_n_geometries(SEXP x) {
        typedef SEXP(*Ptr_cpp_n_geometries)(SEXP);
        static Ptr_cpp_n_geometries p_cpp_n_geometries = NULL;
        if (p_cpp_n_geometries == NULL) {
            validateSignature("IntegerVector(*cpp_n_geometries)(SEXP)");
            p_cpp_n_geometries = (Ptr_cpp_n_geometries)R_GetCCallable("geom", "_geom_cpp_n_geometries");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_n_geometries(Shield<SEXP>(Rcpp::wrap(x)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<IntegerVector >(rcpp_result_gen);
    }

    inline IntegerVector cpp_n_coordinates(SEXP x) {
        typedef SEXP(*Ptr_cpp_n_coordinates)(SEXP);
        static Ptr_cpp_n_coordinates p_cpp_n_coordinates = NULL;
        if (p_cpp_n_coordinates == NULL) {
            validateSignature("IntegerVector(*cpp_n_coordinates)(SEXP)");
            p_cpp_n_coordinates = (Ptr_cpp_n_coordinates)R_GetCCallable("geom", "_geom_cpp_n_coordinates");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_n_coordinates(Shield<SEXP>(Rcpp::wrap(x)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<IntegerVector >(rcpp_result_gen);
    }

    inline IntegerVector cpp_n_points(SEXP x) {
        typedef SEXP(*Ptr_cpp_n_points)(SEXP);
        static Ptr_cpp_n_points p_cpp_n_points = NULL;
        if (p_cpp_n_points == NULL) {
            validateSignature("IntegerVector(*cpp_n_points)(SEXP)");
            p_cpp_n_points = (Ptr_cpp_n_points)R_GetCCallable("geom", "_geom_cpp_n_points");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_n_points(Shield<SEXP>(Rcpp::wrap(x)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<IntegerVector >(rcpp_result_gen);
    }

    inline IntegerVector cpp_n_interior_rings(SEXP x) {
        typedef SEXP(*Ptr_cpp_n_interior_rings)(SEXP);
        static Ptr_cpp_n_interior_rings p_cpp_n_interior_rings = NULL;
        if (p_cpp_n_interior_rings == NULL) {
            validateSignature("IntegerVector(*cpp_n_interior_rings)(SEXP)");
            p_cpp_n_interior_rings = (Ptr_cpp_n_interior_rings)R_GetCCallable("geom", "_geom_cpp_n_interior_rings");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_n_interior_rings(Shield<SEXP>(Rcpp::wrap(x)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<IntegerVector >(rcpp_result_gen);
    }

    inline IntegerVector cpp_n_dimensions(SEXP x) {
        typedef SEXP(*Ptr_cpp_n_dimensions)(SEXP);
        static Ptr_cpp_n_dimensions p_cpp_n_dimensions = NULL;
        if (p_cpp_n_dimensions == NULL) {
            validateSignature("IntegerVector(*cpp_n_dimensions)(SEXP)");
            p_cpp_n_dimensions = (Ptr_cpp_n_dimensions)R_GetCCallable("geom", "_geom_cpp_n_dimensions");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_n_dimensions(Shield<SEXP>(Rcpp::wrap(x)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<IntegerVector >(rcpp_result_gen);
    }

    inline IntegerVector cpp_n_coordinate_dimensions(SEXP x) {
        typedef SEXP(*Ptr_cpp_n_coordinate_dimensions)(SEXP);
        static Ptr_cpp_n_coordinate_dimensions p_cpp_n_coordinate_dimensions = NULL;
        if (p_cpp_n_coordinate_dimensions == NULL) {
            validateSignature("IntegerVector(*cpp_n_coordinate_dimensions)(SEXP)");
            p_cpp_n_coordinate_dimensions = (Ptr_cpp_n_coordinate_dimensions)R_GetCCallable("geom", "_geom_cpp_n_coordinate_dimensions");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_n_coordinate_dimensions(Shield<SEXP>(Rcpp::wrap(x)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<IntegerVector >(rcpp_result_gen);
    }

    inline NumericVector cpp_project(SEXP dataLeft, SEXP dataRight) {
        typedef SEXP(*Ptr_cpp_project)(SEXP,SEXP);
        static Ptr_cpp_project p_cpp_project = NULL;
        if (p_cpp_project == NULL) {
            validateSignature("NumericVector(*cpp_project)(SEXP,SEXP)");
            p_cpp_project = (Ptr_cpp_project)R_GetCCallable("geom", "_geom_cpp_project");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_project(Shield<SEXP>(Rcpp::wrap(dataLeft)), Shield<SEXP>(Rcpp::wrap(dataRight)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

    inline NumericVector cpp_project_normalized(SEXP dataLeft, SEXP dataRight) {
        typedef SEXP(*Ptr_cpp_project_normalized)(SEXP,SEXP);
        static Ptr_cpp_project_normalized p_cpp_project_normalized = NULL;
        if (p_cpp_project_normalized == NULL) {
            validateSignature("NumericVector(*cpp_project_normalized)(SEXP,SEXP)");
            p_cpp_project_normalized = (Ptr_cpp_project_normalized)R_GetCCallable("geom", "_geom_cpp_project_normalized");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_project_normalized(Shield<SEXP>(Rcpp::wrap(dataLeft)), Shield<SEXP>(Rcpp::wrap(dataRight)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

    inline SEXP cpp_interpolate(SEXP data, SEXP ptype, NumericVector distance) {
        typedef SEXP(*Ptr_cpp_interpolate)(SEXP,SEXP,SEXP);
        static Ptr_cpp_interpolate p_cpp_interpolate = NULL;
        if (p_cpp_interpolate == NULL) {
            validateSignature("SEXP(*cpp_interpolate)(SEXP,SEXP,NumericVector)");
            p_cpp_interpolate = (Ptr_cpp_interpolate)R_GetCCallable("geom", "_geom_cpp_interpolate");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_interpolate(Shield<SEXP>(Rcpp::wrap(data)), Shield<SEXP>(Rcpp::wrap(ptype)), Shield<SEXP>(Rcpp::wrap(distance)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

    inline SEXP cpp_interpolate_normalized(SEXP data, SEXP ptype, NumericVector distance) {
        typedef SEXP(*Ptr_cpp_interpolate_normalized)(SEXP,SEXP,SEXP);
        static Ptr_cpp_interpolate_normalized p_cpp_interpolate_normalized = NULL;
        if (p_cpp_interpolate_normalized == NULL) {
            validateSignature("SEXP(*cpp_interpolate_normalized)(SEXP,SEXP,NumericVector)");
            p_cpp_interpolate_normalized = (Ptr_cpp_interpolate_normalized)R_GetCCallable("geom", "_geom_cpp_interpolate_normalized");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_interpolate_normalized(Shield<SEXP>(Rcpp::wrap(data)), Shield<SEXP>(Rcpp::wrap(ptype)), Shield<SEXP>(Rcpp::wrap(distance)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

    inline SEXP cpp_point_on_surface(SEXP dataLeft, SEXP ptype) {
        typedef SEXP(*Ptr_cpp_point_on_surface)(SEXP,SEXP);
        static Ptr_cpp_point_on_surface p_cpp_point_on_surface = NULL;
        if (p_cpp_point_on_surface == NULL) {
            validateSignature("SEXP(*cpp_point_on_surface)(SEXP,SEXP)");
            p_cpp_point_on_surface = (Ptr_cpp_point_on_surface)R_GetCCallable("geom", "_geom_cpp_point_on_surface");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_point_on_surface(Shield<SEXP>(Rcpp::wrap(dataLeft)), Shield<SEXP>(Rcpp::wrap(ptype)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

    inline SEXP cpp_centroid(SEXP dataLeft, SEXP ptype) {
        typedef SEXP(*Ptr_cpp_centroid)(SEXP,SEXP);
        static Ptr_cpp_centroid p_cpp_centroid = NULL;
        if (p_cpp_centroid == NULL) {
            validateSignature("SEXP(*cpp_centroid)(SEXP,SEXP)");
            p_cpp_centroid = (Ptr_cpp_centroid)R_GetCCallable("geom", "_geom_cpp_centroid");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_centroid(Shield<SEXP>(Rcpp::wrap(dataLeft)), Shield<SEXP>(Rcpp::wrap(ptype)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

    inline SEXP cpp_node(SEXP dataLeft, SEXP ptype) {
        typedef SEXP(*Ptr_cpp_node)(SEXP,SEXP);
        static Ptr_cpp_node p_cpp_node = NULL;
        if (p_cpp_node == NULL) {
            validateSignature("SEXP(*cpp_node)(SEXP,SEXP)");
            p_cpp_node = (Ptr_cpp_node)R_GetCCallable("geom", "_geom_cpp_node");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_node(Shield<SEXP>(Rcpp::wrap(dataLeft)), Shield<SEXP>(Rcpp::wrap(ptype)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

    inline SEXP cpp_boundary(SEXP dataLeft, SEXP ptype) {
        typedef SEXP(*Ptr_cpp_boundary)(SEXP,SEXP);
        static Ptr_cpp_boundary p_cpp_boundary = NULL;
        if (p_cpp_boundary == NULL) {
            validateSignature("SEXP(*cpp_boundary)(SEXP,SEXP)");
            p_cpp_boundary = (Ptr_cpp_boundary)R_GetCCallable("geom", "_geom_cpp_boundary");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_boundary(Shield<SEXP>(Rcpp::wrap(dataLeft)), Shield<SEXP>(Rcpp::wrap(ptype)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

    inline SEXP cpp_envelope(SEXP dataLeft, SEXP ptype) {
        typedef SEXP(*Ptr_cpp_envelope)(SEXP,SEXP);
        static Ptr_cpp_envelope p_cpp_envelope = NULL;
        if (p_cpp_envelope == NULL) {
            validateSignature("SEXP(*cpp_envelope)(SEXP,SEXP)");
            p_cpp_envelope = (Ptr_cpp_envelope)R_GetCCallable("geom", "_geom_cpp_envelope");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_envelope(Shield<SEXP>(Rcpp::wrap(dataLeft)), Shield<SEXP>(Rcpp::wrap(ptype)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

    inline SEXP cpp_convex_hull(SEXP dataLeft, SEXP ptype) {
        typedef SEXP(*Ptr_cpp_convex_hull)(SEXP,SEXP);
        static Ptr_cpp_convex_hull p_cpp_convex_hull = NULL;
        if (p_cpp_convex_hull == NULL) {
            validateSignature("SEXP(*cpp_convex_hull)(SEXP,SEXP)");
            p_cpp_convex_hull = (Ptr_cpp_convex_hull)R_GetCCallable("geom", "_geom_cpp_convex_hull");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_convex_hull(Shield<SEXP>(Rcpp::wrap(dataLeft)), Shield<SEXP>(Rcpp::wrap(ptype)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

    inline SEXP cpp_minimum_rotated_rectangle(SEXP dataLeft, SEXP ptype) {
        typedef SEXP(*Ptr_cpp_minimum_rotated_rectangle)(SEXP,SEXP);
        static Ptr_cpp_minimum_rotated_rectangle p_cpp_minimum_rotated_rectangle = NULL;
        if (p_cpp_minimum_rotated_rectangle == NULL) {
            validateSignature("SEXP(*cpp_minimum_rotated_rectangle)(SEXP,SEXP)");
            p_cpp_minimum_rotated_rectangle = (Ptr_cpp_minimum_rotated_rectangle)R_GetCCallable("geom", "_geom_cpp_minimum_rotated_rectangle");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_minimum_rotated_rectangle(Shield<SEXP>(Rcpp::wrap(dataLeft)), Shield<SEXP>(Rcpp::wrap(ptype)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

    inline SEXP cpp_minimum_bounding_circle(SEXP dataLeft, SEXP ptype) {
        typedef SEXP(*Ptr_cpp_minimum_bounding_circle)(SEXP,SEXP);
        static Ptr_cpp_minimum_bounding_circle p_cpp_minimum_bounding_circle = NULL;
        if (p_cpp_minimum_bounding_circle == NULL) {
            validateSignature("SEXP(*cpp_minimum_bounding_circle)(SEXP,SEXP)");
            p_cpp_minimum_bounding_circle = (Ptr_cpp_minimum_bounding_circle)R_GetCCallable("geom", "_geom_cpp_minimum_bounding_circle");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_minimum_bounding_circle(Shield<SEXP>(Rcpp::wrap(dataLeft)), Shield<SEXP>(Rcpp::wrap(ptype)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

    inline SEXP cpp_minimum_bounding_circle_center(SEXP dataLeft, SEXP ptype) {
        typedef SEXP(*Ptr_cpp_minimum_bounding_circle_center)(SEXP,SEXP);
        static Ptr_cpp_minimum_bounding_circle_center p_cpp_minimum_bounding_circle_center = NULL;
        if (p_cpp_minimum_bounding_circle_center == NULL) {
            validateSignature("SEXP(*cpp_minimum_bounding_circle_center)(SEXP,SEXP)");
            p_cpp_minimum_bounding_circle_center = (Ptr_cpp_minimum_bounding_circle_center)R_GetCCallable("geom", "_geom_cpp_minimum_bounding_circle_center");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_minimum_bounding_circle_center(Shield<SEXP>(Rcpp::wrap(dataLeft)), Shield<SEXP>(Rcpp::wrap(ptype)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

    inline NumericVector cpp_minimum_bounding_circle_radius(SEXP dataLeft) {
        typedef SEXP(*Ptr_cpp_minimum_bounding_circle_radius)(SEXP);
        static Ptr_cpp_minimum_bounding_circle_radius p_cpp_minimum_bounding_circle_radius = NULL;
        if (p_cpp_minimum_bounding_circle_radius == NULL) {
            validateSignature("NumericVector(*cpp_minimum_bounding_circle_radius)(SEXP)");
            p_cpp_minimum_bounding_circle_radius = (Ptr_cpp_minimum_bounding_circle_radius)R_GetCCallable("geom", "_geom_cpp_minimum_bounding_circle_radius");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_minimum_bounding_circle_radius(Shield<SEXP>(Rcpp::wrap(dataLeft)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

    inline SEXP cpp_minimum_width(SEXP dataLeft, SEXP ptype) {
        typedef SEXP(*Ptr_cpp_minimum_width)(SEXP,SEXP);
        static Ptr_cpp_minimum_width p_cpp_minimum_width = NULL;
        if (p_cpp_minimum_width == NULL) {
            validateSignature("SEXP(*cpp_minimum_width)(SEXP,SEXP)");
            p_cpp_minimum_width = (Ptr_cpp_minimum_width)R_GetCCallable("geom", "_geom_cpp_minimum_width");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_minimum_width(Shield<SEXP>(Rcpp::wrap(dataLeft)), Shield<SEXP>(Rcpp::wrap(ptype)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

    inline SEXP cpp_minimum_clearance_line(SEXP dataLeft, SEXP ptype) {
        typedef SEXP(*Ptr_cpp_minimum_clearance_line)(SEXP,SEXP);
        static Ptr_cpp_minimum_clearance_line p_cpp_minimum_clearance_line = NULL;
        if (p_cpp_minimum_clearance_line == NULL) {
            validateSignature("SEXP(*cpp_minimum_clearance_line)(SEXP,SEXP)");
            p_cpp_minimum_clearance_line = (Ptr_cpp_minimum_clearance_line)R_GetCCallable("geom", "_geom_cpp_minimum_clearance_line");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_minimum_clearance_line(Shield<SEXP>(Rcpp::wrap(dataLeft)), Shield<SEXP>(Rcpp::wrap(ptype)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

    inline NumericVector cpp_minimum_clearance(SEXP dataLeft) {
        typedef SEXP(*Ptr_cpp_minimum_clearance)(SEXP);
        static Ptr_cpp_minimum_clearance p_cpp_minimum_clearance = NULL;
        if (p_cpp_minimum_clearance == NULL) {
            validateSignature("NumericVector(*cpp_minimum_clearance)(SEXP)");
            p_cpp_minimum_clearance = (Ptr_cpp_minimum_clearance)R_GetCCallable("geom", "_geom_cpp_minimum_clearance");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_minimum_clearance(Shield<SEXP>(Rcpp::wrap(dataLeft)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericVector >(rcpp_result_gen);
    }

    inline LogicalVector cpp_validate_provider(SEXP data) {
        typedef SEXP(*Ptr_cpp_validate_provider)(SEXP);
        static Ptr_cpp_validate_provider p_cpp_validate_provider = NULL;
        if (p_cpp_validate_provider == NULL) {
            validateSignature("LogicalVector(*cpp_validate_provider)(SEXP)");
            p_cpp_validate_provider = (Ptr_cpp_validate_provider)R_GetCCallable("geom", "_geom_cpp_validate_provider");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_validate_provider(Shield<SEXP>(Rcpp::wrap(data)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<LogicalVector >(rcpp_result_gen);
    }

    inline List cpp_segment_intersection(NumericVector ax0, NumericVector ay0, NumericVector ax1, NumericVector ay1, NumericVector bx0, NumericVector by0, NumericVector bx1, NumericVector by1) {
        typedef SEXP(*Ptr_cpp_segment_intersection)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_cpp_segment_intersection p_cpp_segment_intersection = NULL;
        if (p_cpp_segment_intersection == NULL) {
            validateSignature("List(*cpp_segment_intersection)(NumericVector,NumericVector,NumericVector,NumericVector,NumericVector,NumericVector,NumericVector,NumericVector)");
            p_cpp_segment_intersection = (Ptr_cpp_segment_intersection)R_GetCCallable("geom", "_geom_cpp_segment_intersection");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_segment_intersection(Shield<SEXP>(Rcpp::wrap(ax0)), Shield<SEXP>(Rcpp::wrap(ay0)), Shield<SEXP>(Rcpp::wrap(ax1)), Shield<SEXP>(Rcpp::wrap(ay1)), Shield<SEXP>(Rcpp::wrap(bx0)), Shield<SEXP>(Rcpp::wrap(by0)), Shield<SEXP>(Rcpp::wrap(bx1)), Shield<SEXP>(Rcpp::wrap(by1)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline IntegerVector cpp_orientation_index(NumericVector ax, NumericVector ay, NumericVector bx, NumericVector by, NumericVector px, NumericVector py) {
        typedef SEXP(*Ptr_cpp_orientation_index)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_cpp_orientation_index p_cpp_orientation_index = NULL;
        if (p_cpp_orientation_index == NULL) {
            validateSignature("IntegerVector(*cpp_orientation_index)(NumericVector,NumericVector,NumericVector,NumericVector,NumericVector,NumericVector)");
            p_cpp_orientation_index = (Ptr_cpp_orientation_index)R_GetCCallable("geom", "_geom_cpp_orientation_index");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_orientation_index(Shield<SEXP>(Rcpp::wrap(ax)), Shield<SEXP>(Rcpp::wrap(ay)), Shield<SEXP>(Rcpp::wrap(bx)), Shield<SEXP>(Rcpp::wrap(by)), Shield<SEXP>(Rcpp::wrap(px)), Shield<SEXP>(Rcpp::wrap(py)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<IntegerVector >(rcpp_result_gen);
    }

}

#endif // RCPP_geom_RCPPEXPORTS_H_GEN_

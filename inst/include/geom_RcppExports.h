// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_geom_RCPPEXPORTS_H_GEN_
#define RCPP_geom_RCPPEXPORTS_H_GEN_

#include <Rcpp.h>

namespace geom {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("geom", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("geom", "_geom_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in geom");
            }
        }
    }

    inline List cpp_segment_intersection(NumericVector ax0, NumericVector ay0, NumericVector ax1, NumericVector ay1, NumericVector bx0, NumericVector by0, NumericVector bx1, NumericVector by1) {
        typedef SEXP(*Ptr_cpp_segment_intersection)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_cpp_segment_intersection p_cpp_segment_intersection = NULL;
        if (p_cpp_segment_intersection == NULL) {
            validateSignature("List(*cpp_segment_intersection)(NumericVector,NumericVector,NumericVector,NumericVector,NumericVector,NumericVector,NumericVector,NumericVector)");
            p_cpp_segment_intersection = (Ptr_cpp_segment_intersection)R_GetCCallable("geom", "_geom_cpp_segment_intersection");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_segment_intersection(Shield<SEXP>(Rcpp::wrap(ax0)), Shield<SEXP>(Rcpp::wrap(ay0)), Shield<SEXP>(Rcpp::wrap(ax1)), Shield<SEXP>(Rcpp::wrap(ay1)), Shield<SEXP>(Rcpp::wrap(bx0)), Shield<SEXP>(Rcpp::wrap(by0)), Shield<SEXP>(Rcpp::wrap(bx1)), Shield<SEXP>(Rcpp::wrap(by1)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline IntegerVector cpp_orientation_index(NumericVector ax, NumericVector ay, NumericVector bx, NumericVector by, NumericVector px, NumericVector py) {
        typedef SEXP(*Ptr_cpp_orientation_index)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_cpp_orientation_index p_cpp_orientation_index = NULL;
        if (p_cpp_orientation_index == NULL) {
            validateSignature("IntegerVector(*cpp_orientation_index)(NumericVector,NumericVector,NumericVector,NumericVector,NumericVector,NumericVector)");
            p_cpp_orientation_index = (Ptr_cpp_orientation_index)R_GetCCallable("geom", "_geom_cpp_orientation_index");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_orientation_index(Shield<SEXP>(Rcpp::wrap(ax)), Shield<SEXP>(Rcpp::wrap(ay)), Shield<SEXP>(Rcpp::wrap(bx)), Shield<SEXP>(Rcpp::wrap(by)), Shield<SEXP>(Rcpp::wrap(px)), Shield<SEXP>(Rcpp::wrap(py)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<IntegerVector >(rcpp_result_gen);
    }

}

#endif // RCPP_geom_RCPPEXPORTS_H_GEN_
